# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-trace-python Documentation for the list of available functions.

import os
import sys

sys.path.append(os.environ['HOME'] + '/lazybox/scripts/perf')

import lbperfutil

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
	'/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

from perf_trace_context import *
from Core import *


def trace_begin():
    pass

def trace_end():
    lbperfutil.pr_evcnts_in_time()

# Add callback for your tracepoint as below.  This script assumes the perf.data
# was recorded with perf probe, sj:alloc_nodemask and sj:alloc_nodemask_ret,
# which is added by command below:
# ```
# $ sudo perf probe --add 'sj:alloc_nodemask=__alloc_pages_nodemask order'
# $ sudo perf probe --add 'sj:alloc_nodemask_ret=__alloc_pages_nodemask:105 order'
# ```
# 
# Please note that the line of sj:alloc_nodemask_ret can be irrelevant for
# specific kernel version.

def sj__alloc_nodemask(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	common_callchain, __probe_ip, order):
    lbperfutil.count_event(event_name + "%s" % order, common_secs, 1)
    lbperfutil.count_event(event_name, common_secs, 1)

def sj__alloc_nodemask_ret(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	common_callchain, __probe_ip, order):
    lbperfutil.count_event(event_name + "%s" % order, common_secs, 1)
    lbperfutil.count_event(event_name, common_secs, 1)

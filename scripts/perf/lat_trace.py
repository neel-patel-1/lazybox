# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-trace-python Documentation for the list of available functions.

import os
import sys

sys.path.append(os.environ['HOME'] + '/lazybox/scripts/perf')

import lbperfutil

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
	'/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

from perf_trace_context import *
from Core import *

import getopt

USAGE = sys.argv[0] + "<orders>"

target_orders = []

if len(sys.argv) > 1:
    target_orders = [int(o) for o in sys.argv[1].split(',')]


def trace_begin():
    pass

def trace_end():
    secs = sorted(latencies.keys())
    for s in secs:
        for l in latencies[s]:
            print "%d %d" % (s, l)

start_events = autodict()
latencies = autodict()

def sj__alloc_nodemask(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	common_callchain, __probe_ip, order):
    if target_orders and order not in target_orders:
        return

    try:
        start_events[common_cpu][order] += [common_secs * 10**9 + common_nsecs]
    except TypeError:
        start_events[common_cpu][order] = [common_secs * 10**9 + common_nsecs]

def sj__alloc_nodemask_ret(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	common_callchain, __probe_ip, order):
    if target_orders and order not in target_orders:
        return

    start = start_events[common_cpu][order][0]
    try:
        start_events[common_cpu][order] = start_events[common_cpu][order][1:]
    except TypeError:
        return
    endtime = common_secs * 10**9 + common_nsecs
    try:
        latencies[start] += [endtime - start]
    except TypeError:
        latencies[start] = [endtime - start]

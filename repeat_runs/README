This directory contains scripts for 1) repeated runs of various experiments and
2) summary of the multiple outputs.

For each of the purposes, you can use `run.sh` and `post.sh`, repectively.
`run.sh` repeatedly runs the required experiments for user-specified times and
stores the outputs from each data in files under hierarchical directories.
`post.sh` refines the raw outputs and make statistics (average, min, max,
stdev) of each of the refined data.

Each experiment is identified by its 'name' and 'variant'.  One experiment
could contain multiple variants.  By knowing the 'name' and 'variant', you
should be able to identify what workloads should run under what condition and
what outputs should be generated.

Files for each experiment
=========================

Nonetheless, the essential parts of each experiements should be implemented by
users by themeselves.  They should implement some executable files and place
those under specific directory with specific name.

`<exp name>/runners/(start|main|back|end)/`
------------------------------------------

Place executable files each running different workload for the experiment.
Each of the files under each last directory (start, main, back, or end) will be
executed as `(start|main|back|end)` workload, as defined by lazybox.  The files
will be sorted by the name using `sort` command and be described to the
`run_exps.py` in the order.

Each of the runners receives the output directory for this run as an argument.
The output directory is `<exp name>/<variant>/0(0-9)`.  Thus, you can know
current exp name and variant using the argument.  The outputs containing
information for the final report should be stored in the directory as a file.

You can add custom runners by defining `(start|main|back|end)_RUNNERS`
variables.  Each variable should contain each type of workloads.

`<exp name>/parsers/`
---------------------

Place executable files each parsing different raw output files made by your
runners (executable files under `<exp name>/runners/*`).  The name of the
executable file should be matched with one of the raw output files, but can
have any suffix.  For each output file, the parser matched with the name will
be executed.

Each of the parsers receives the path to the raw output files and the path to
the directory that parsed outputs should be stored.  The parsed data ashould be
placed under the directory as a file.

You can change this directory to any other path by defining `parsers_dir` in
your config file.


`<exp name>/statists/`
----------------------

Place executable files each generating stat of the parsed outputs for each of
the repeated runs.  The name of the executable file should be matched with one
of the parsed output files, but can have any suffix.  For each parsed output
file, the stat executable file matched with the name will be executed.

Each of the stat generator receives the path of the directory that their
statistics should be saved, and the paths to the parsed files directories.


TODO
====

- Add report making
- Add pre-requisites check
